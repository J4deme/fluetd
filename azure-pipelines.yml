trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'destrong-arm'
  dockerRegistryServiceConnection: '6862ce6f-7d49-40b0-9089-ed610706205c'
  imageRepository: 'bestrong'
  containerRegistry: 'bestrongaksacr12.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
# ===== BUILD =====
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
    - job: DockerBuild
      displayName: Build and Push Image
      steps:
        - task: Docker@2
          displayName: Build and Push Docker Image
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)

# ===== HTTPS SETUP =====
- stage: SetupHTTPS
  displayName: 'Setup HTTPS using Ingress and cert-manager'
  dependsOn: Build
  jobs:
    - job: ConfigureIngress
      displayName: 'Install Ingress + TLS'
      steps:

        - task: AzureCLI@2
          displayName: 'Get AKS Credentials'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group bestrongAKS-rg --name bestrongAKS12

        - task: HelmInstaller@1
          inputs:
            helmVersionToInstall: 'latest'

        - script: |
            helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
            helm repo update
          displayName: 'Add NGINX Repo'

        - task: AzureCLI@2
          displayName: 'Create Static Public IP'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az network public-ip create \
                --resource-group "MC_bestrongAKS-rg_bestrongAKS12_westeurope" \
                --name bestrong-ingress-ip \
                --sku Standard \
                --allocation-method static \
                --location westeurope

              IP_ADDRESS=$(az network public-ip show \
                --resource-group "MC_bestrongAKS-rg_bestrongAKS12_westeurope" \
                --name bestrong-ingress-ip \
                --query ipAddress -o tsv)
              echo "##vso[task.setvariable variable=staticIpAddress]$IP_ADDRESS"

        - script: |
            # Uninstall existing ingress controller if any
            helm uninstall nginx-ingress --namespace default || true
            
            # Wait a moment to ensure resources are cleaned up
            sleep 10
            
            # Install Nginx Ingress Controller with proper configuration
            helm install nginx-ingress ingress-nginx/ingress-nginx \
              --set controller.service.loadBalancerIP=$(staticIpAddress) \
              --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
              --set controller.admissionWebhooks.enabled=true \
              --set controller.admissionWebhooks.patch.enabled=true \
              --wait
              
            echo "Waiting for external IP..."
            for i in {1..30}; do
              IP=$(kubectl get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [[ ! -z "$IP" ]]; then
                echo "IP assigned: $IP"
                break
              fi
              sleep 10
            done
            
            # Properly wait for NGINX Ingress to be fully ready
            echo "Ensuring all NGINX Ingress components are ready..."
            kubectl rollout status deployment/nginx-ingress-ingress-nginx-controller --timeout=180s
            
            # Verify that webhook service is properly registered
            echo "Verifying webhook service..."
            if kubectl get svc nginx-ingress-ingress-nginx-controller-admission -n default; then
              echo "Webhook service is available, checking for endpoints..."
              kubectl get endpoints nginx-ingress-ingress-nginx-controller-admission -n default
              
              # Ensure webhook deployment is ready
              if kubectl wait --for=condition=available deployment/nginx-ingress-ingress-nginx-controller --timeout=90s; then
                echo "NGINX Ingress controller is ready"
              fi
            else
              echo "Warning: Admission webhook service not found. This may cause issues with Ingress resources."
            fi
            
            echo "##vso[task.setvariable variable=ingressIP;isOutput=true]$IP"
            echo "##vso[task.setvariable variable=ingressIP]$IP"
          displayName: 'Install NGINX Ingress'
          name: ingressInstall

        - script: |
            helm repo add jetstack https://charts.jetstack.io
            helm repo update
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.crds.yaml
            helm install cert-manager jetstack/cert-manager \
              --namespace cert-manager \
              --create-namespace \
              --version v1.12.0
            kubectl -n cert-manager wait --for=condition=available --timeout=120s deployment/cert-manager
            kubectl -n cert-manager wait --for=condition=available --timeout=120s deployment/cert-manager-webhook
          displayName: 'Install cert-manager'

        - script: |
            # Wait for Nginx Ingress controller to be fully ready
            echo "Ensuring Ingress controller is fully ready..."
            kubectl rollout status deployment/nginx-ingress-ingress-nginx-controller --timeout=180s || true
            
            # Check if the admission webhook service exists and has endpoints
            echo "Verifying admission webhook is operational..."
            for i in {1..10}; do
              ENDPOINTS=$(kubectl get endpoints -n default nginx-ingress-ingress-nginx-controller-admission -o jsonpath='{.subsets[*].addresses}' --ignore-not-found)
              if [ ! -z "$ENDPOINTS" ]; then
                echo "Admission webhook endpoints ready. Proceeding with certificate generation."
                break
              fi
              echo "Waiting for admission webhook endpoints... attempt $i/10"
              sleep 10
            done
            
            DOMAIN="bestrong.$(kubectl get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}').nip.io"
            cat <<EOF > tls.yaml
            apiVersion: cert-manager.io/v1
            kind: ClusterIssuer
            metadata:
              name: selfsigned-cluster-issuer
            spec:
              selfSigned: {}
            ---
            apiVersion: cert-manager.io/v1
            kind: Certificate
            metadata:
              name: bestrong-tls
              namespace: default
            spec:
              dnsNames:
                - $DOMAIN
              secretName: bestrong-tls-secret
              issuerRef:
                name: selfsigned-cluster-issuer
                kind: ClusterIssuer
              commonName: $DOMAIN
            EOF
            kubectl apply -f tls.yaml
            sleep 10
            kubectl wait --for=condition=Ready certificate/bestrong-tls --timeout=60s
          displayName: 'Configure TLS for Ingress'

# ===== HELM DEPLOY =====
- stage: HelmDeploy
  displayName: 'Deploy App via Helm'
  dependsOn: SetupHTTPS
  variables:
    ingressIP: $[ stageDependencies.SetupHTTPS.ConfigureIngress.outputs['ingressInstall.ingressIP'] ]
    chartVersion: '1.0.0-$(Build.BuildId)'
    helmChartName: 'bestrongapp'
    acrUrl: '$(containerRegistry)'
  jobs:
    - job: DeployApp
      steps:

        - task: AzureCLI@2
          displayName: 'AKS Credentials'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group bestrongAKS-rg --name bestrongAKS12

        - task: HelmInstaller@1
          inputs:
            helmVersionToInstall: 'latest'

        - script: |
            helm package helm/ --version $(chartVersion)
          displayName: 'Package Helm Chart'

        - script: |
            export HELM_EXPERIMENTAL_OCI=1
            helm registry login $(acrUrl) --username $(acrUsername) --password $(acrPassword)
            helm push $(helmChartName)-$(chartVersion).tgz oci://$(acrUrl)/helm
          displayName: 'Push Helm Chart to ACR'
          env:
            acrUsername: $(acrUsername)
            acrPassword: $(acrPassword)

        - script: |
            export HELM_EXPERIMENTAL_OCI=1
            helm registry login $(acrUrl) --username $(acrUsername) --password $(acrPassword)
            helm pull oci://$(acrUrl)/helm/$(helmChartName) --version $(chartVersion)

            # Fetch IP directly if variable is not set
            if [ -z "$(ingressIP)" ]; then
              INGRESS_IP=$(kubectl get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              echo "Using directly fetched IP: $INGRESS_IP"
            else
              INGRESS_IP=$(ingressIP)
              echo "Using pipeline variable IP: $INGRESS_IP"
            fi

            # Validation to ensure we don't create invalid hostnames
            if [ -z "$INGRESS_IP" ]; then
              echo "##vso[task.logissue type=error]No Ingress IP found. Cannot proceed with deployment."
              exit 1
            fi

            INGRESS_HOST="bestrong.$INGRESS_IP.nip.io"
            echo "Using ingress host: $INGRESS_HOST"
            
            # Double check webhook readiness before proceeding
            echo "Final check for webhook readiness..."
            for i in {1..5}; do
              if kubectl get validatingwebhookconfigurations ingress-nginx-admission >/dev/null 2>&1; then
                echo "Validating webhook configuration exists. Proceeding with deployment."
                break
              fi
              echo "Waiting for webhook configuration... attempt $i/5"
              sleep 5
            done
            
            # Let's directly check the status of ingress-nginx components
            echo "Status of nginx-ingress components:"
            kubectl get all -l app.kubernetes.io/name=ingress-nginx -A
            
            # Check if the webhook needs to be patched or waiting
            WEBHOOK_READY="true"
            WEBHOOK_SERVICE=$(kubectl get svc nginx-ingress-ingress-nginx-controller-admission -n default -o name --ignore-not-found)
            if [ -z "$WEBHOOK_SERVICE" ]; then
              echo "Warning: Admission webhook service not found. Adding extra waiting time..."
              sleep 30
              WEBHOOK_READY="false"
            else
              WEBHOOK_ENDPOINTS=$(kubectl get endpoints -n default nginx-ingress-ingress-nginx-controller-admission -o jsonpath='{.subsets[*].addresses}' --ignore-not-found)
              if [ -z "$WEBHOOK_ENDPOINTS" ]; then
                echo "Warning: No endpoints found for admission webhook. Adding extra waiting time..."
                sleep 30
                WEBHOOK_READY="false"
              fi
            fi
            
            # Main deployment section
            echo "Proceeding with deployment..."
            
            helm uninstall $(helmChartName) --namespace default || true
            
            # Additional waiting to ensure resources are fully cleaned
            sleep 5
            
            echo "Installing main application..."
            helm install $(helmChartName) $(helmChartName)-$(chartVersion).tgz \
              --set image.repository=$(acrUrl)/$(imageRepository) \
              --set image.tag=stable \
              --set ingress.host=$INGRESS_HOST \
              ${WEBHOOK_BYPASS:-} \
              --values ./helm/values.yaml \
              --namespace default --create-namespace \
              --timeout 10m0s
            
            if [ $? -ne 0 ] && [ "$WEBHOOK_READY" == "false" ]; then
              echo "Deployment failed but webhook wasn't ready. Attempting with explicit bypass..."
              helm install $(helmChartName) $(helmChartName)-$(chartVersion).tgz \
                --set image.repository=$(acrUrl)/$(imageRepository) \
                --set image.tag=stable \
                --set ingress.host=$INGRESS_HOST \
                --set-string "controller.admissionWebhooks.enabled=false" \
                --values ./helm/values.yaml \
                --namespace default --create-namespace
            fi

            helm uninstall $(helmChartName)-canary --namespace default || true
            
            # Additional waiting to ensure resources are fully cleaned
            sleep 5
            
            echo "Installing canary application..."
            helm install $(helmChartName)-canary $(helmChartName)-$(chartVersion).tgz \
              --set image.repository=$(acrUrl)/$(imageRepository) \
              --set image.tag=$(Build.BuildId) \
              --set ingress.host=$INGRESS_HOST \
              ${WEBHOOK_BYPASS:-} \
              --values ./helm/values-canary.yaml \
              --namespace default \
              --timeout 10m0s
              
            if [ $? -ne 0 ] && [ "$WEBHOOK_READY" == "false" ]; then
              echo "Canary deployment failed but webhook wasn't ready. Attempting with explicit bypass..."
              helm install $(helmChartName)-canary $(helmChartName)-$(chartVersion).tgz \
                --set image.repository=$(acrUrl)/$(imageRepository) \
                --set image.tag=$(Build.BuildId) \
                --set ingress.host=$INGRESS_HOST \
                --set-string "controller.admissionWebhooks.enabled=false" \
                --values ./helm/values-canary.yaml \
                --namespace default
            fi
          displayName: 'Deploy Helm Chart to AKS'
          env:
            acrUsername: $(acrUsername)
            acrPassword: $(acrPassword)