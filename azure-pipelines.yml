trigger:
  branches:
    include:
      - main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '6862ce6f-7d49-40b0-9089-ed610706205c'
  imageRepository: 'bestrong'
  containerRegistry: 'bestrongaksacr12.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'destrong-arm'

stages:
# ===== BUILD =====
- stage: Build
  displayName: Build and push stage
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)

# ===== HTTPS SETUP =====
- stage: SetupHTTPS
  displayName: 'HTTPS Setup with cert-manager'
  dependsOn: Build
  jobs:
    - job: ConfigureHTTPS
      displayName: 'Configure HTTPS'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Get AKS Credentials'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group bestrongAKS-rg --name bestrongAKS12

        - task: HelmInstaller@1
          displayName: 'Install Helm'
          inputs:
            helmVersionToInstall: 'latest'

        - task: Bash@3
          displayName: 'Add Helm Repositories'
          inputs:
            targetType: 'inline'
            script: |
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm repo update

        - task: AzureCLI@2
          displayName: 'Create Static IP Address in MC_ Resource Group'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az network public-ip create \
                --resource-group "MC_bestrongAKS-rg_bestrongAKS12_westeurope" \
                --name bestrong-ingress-ip \
                --sku Standard \
                --allocation-method static \
                --location westeurope

              IP_ADDRESS=$(az network public-ip show \
                --resource-group "MC_bestrongAKS-rg_bestrongAKS12_westeurope" \
                --name bestrong-ingress-ip \
                --query ipAddress -o tsv)
              echo "##vso[task.setvariable variable=staticIpAddress]$IP_ADDRESS"

        - task: Bash@3
          displayName: 'Install NGINX Ingress Controller'
          inputs:
            targetType: 'inline'
            script: |
              helm uninstall nginx-ingress --namespace default || true
              kubectl delete validatingwebhookconfiguration ingress-nginx-admission --ignore-not-found
              kubectl delete mutatingwebhookconfiguration ingress-nginx-admission --ignore-not-found
              kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission --ignore-not-found
              kubectl delete deployment nginx-ingress-ingress-nginx-controller --ignore-not-found
              kubectl delete svc nginx-ingress-ingress-nginx-controller --ignore-not-found
              sleep 15
              helm install nginx-ingress ingress-nginx/ingress-nginx \
                --set controller.service.loadBalancerIP=$(staticIpAddress) \
                --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
                --set controller.admissionWebhooks.enabled=false \
                --set-string controller.config.use-forwarded-headers="true" \
                --set-string controller.config.compute-full-forwarded-for="true" \
                --set controller.kind=Deployment \
                --set controller.replicaCount=1 \
                --version 4.0.13 \
                --wait \
                --timeout 300s

        - task: Bash@3
          displayName: 'Install cert-manager with CRDs'
          inputs:
            targetType: 'inline'
            script: |
              helm repo add jetstack https://charts.jetstack.io
              helm repo update
              kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.crds.yaml
              helm install cert-manager jetstack/cert-manager \
                --namespace cert-manager \
                --create-namespace \
                --version v1.12.0
              kubectl -n cert-manager wait --for=condition=available --timeout=120s deployment/cert-manager
              kubectl -n cert-manager wait --for=condition=available --timeout=120s deployment/cert-manager-webhook

        - task: Bash@3
          displayName: 'Apply TLS configuration'
          inputs:
            targetType: 'inline'
            script: |
              INGRESS_IP=$(kubectl get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              DOMAIN="bestrong.$INGRESS_IP.nip.io"
              cat <<EOF > tls.yaml
              apiVersion: cert-manager.io/v1
              kind: ClusterIssuer
              metadata:
                name: selfsigned-cluster-issuer
              spec:
                selfSigned: {}
              ---
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: bestrong-tls
                namespace: default
              spec:
                dnsNames:
                  - $DOMAIN
                secretName: bestrong-tls-secret
                issuerRef:
                  name: selfsigned-cluster-issuer
                  kind: ClusterIssuer
                commonName: $DOMAIN
              EOF
              kubectl apply -f tls.yaml
              sleep 10
              kubectl wait --for=condition=Ready certificate/bestrong-tls --timeout=60s || echo "Certificate might not be ready yet"

        - task: Bash@3
          displayName: 'Save Ingress IP for deployment'
          name: SaveIngressIP
          inputs:
            targetType: 'inline'
            script: |
              IP=$(kubectl get service nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              echo "##vso[task.setvariable variable=ingressIP;isOutput=true]$IP"

# ===== HELM DEPLOY =====
- stage: HelmDeploy
  displayName: 'Helm Chart Deploy to AKS'
  dependsOn: SetupHTTPS
  variables:
    ingressIP: $[ stageDependencies.SetupHTTPS.ConfigureHTTPS.outputs['SaveIngressIP.ingressIP'] ]
    chartVersion: '1.0.0-$(Build.BuildId)'
    helmChartName: 'bestrongapp'
    acrUrl: '$(containerRegistry)'
  jobs:
    - job: DeployHelm
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureCLI@2
          displayName: 'Get AKS Credentials'
          inputs:
            azureSubscription: $(azureSubscription)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group bestrongAKS-rg --name bestrongAKS12

        - task: HelmInstaller@1
          displayName: 'Install Helm'
          inputs:
            helmVersionToInstall: 'latest'

        - task: Bash@3
          displayName: 'Package Helm Chart'
          inputs:
            targetType: 'inline'
            script: |
              helm package helm/ --version $(chartVersion)

        - task: Bash@3
          displayName: 'Login to ACR and Push Helm Chart'
          inputs:
            targetType: 'inline'
            script: |
              export HELM_EXPERIMENTAL_OCI=1
              helm registry login $(containerRegistry) \
                --username $(acrUsername) \
                --password $(acrPassword)
              helm push $(helmChartName)-$(chartVersion).tgz oci://$(containerRegistry)/helm
          env:
            acrUsername: $(acrUsername)
            acrPassword: $(acrPassword)

        - task: Bash@3
          displayName: 'Deploy Helm Chart from ACR to AKS'
          inputs:
            targetType: 'inline'
            script: |
              set -e
              export HELM_EXPERIMENTAL_OCI=1
              helm registry login $(containerRegistry) --username $(acrUsername) --password $(acrPassword)
              helm pull oci://$(containerRegistry)/helm/$(helmChartName) --version $(chartVersion)
              
              INGRESS_IP=${ingressIP:-$(kubectl get svc nginx-ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')}
              INGRESS_HOST="bestrong.$INGRESS_IP.nip.io"
              
              cat helm/values.yaml > updated-values.yaml
              sed -i "s|host:.*|host: $INGRESS_HOST|g" updated-values.yaml
              
              # If release exists, uninstall and wait for cleanup
              if helm status $(helmChartName) --namespace default > /dev/null 2>&1; then
                echo "Helm release exists, uninstalling..."
                helm uninstall $(helmChartName) --namespace default
                echo "Waiting for all resources to terminate..."
                sleep 10
                while kubectl get all -n default | grep $(helmChartName); do
                  echo "Waiting for resources to terminate..."
                  sleep 5
                done
              fi
              
              helm install $(helmChartName) $(helmChartName)-$(chartVersion).tgz \
                --set image.repository=$(containerRegistry)/$(imageRepository) \
                --set image.tag=$(tag) \
                --set ingress.host=$INGRESS_HOST \
                --values updated-values.yaml \
                --namespace default --create-namespace \
                --wait \
                --timeout 5m0s